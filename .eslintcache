[{"/Users/juliazolotarev/Documents/Flatiron/assignments/Mod-5/goodfriend/goodfriend-frontend/src/redux/actions.js":"1","/Users/juliazolotarev/Documents/Flatiron/assignments/Mod-5/goodfriend/goodfriend-frontend/src/App.js":"2","/Users/juliazolotarev/Documents/Flatiron/assignments/Mod-5/goodfriend/goodfriend-frontend/src/components/HomeCalendar.js":"3","/Users/juliazolotarev/Documents/Flatiron/assignments/Mod-5/goodfriend/goodfriend-frontend/src/components/UserProfile.js":"4","/Users/juliazolotarev/Documents/Flatiron/assignments/Mod-5/goodfriend/goodfriend-frontend/src/redux/reducer.js":"5","/Users/juliazolotarev/Documents/Flatiron/assignments/Mod-5/goodfriend/goodfriend-frontend/src/redux/actionTypes.js":"6"},{"size":8255,"mtime":1611541568641,"results":"7","hashOfConfig":"8"},{"size":2204,"mtime":1611531709635,"results":"9","hashOfConfig":"8"},{"size":9020,"mtime":1611541523563,"results":"10","hashOfConfig":"8"},{"size":13971,"mtime":1611538311032,"results":"11","hashOfConfig":"8"},{"size":3440,"mtime":1611541613645,"results":"12","hashOfConfig":"8"},{"size":876,"mtime":1611541640656,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"s1ccsc",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/juliazolotarev/Documents/Flatiron/assignments/Mod-5/goodfriend/goodfriend-frontend/src/redux/actions.js",[],"/Users/juliazolotarev/Documents/Flatiron/assignments/Mod-5/goodfriend/goodfriend-frontend/src/App.js",[],"/Users/juliazolotarev/Documents/Flatiron/assignments/Mod-5/goodfriend/goodfriend-frontend/src/components/HomeCalendar.js",["27","28","29","30"],"import React from 'react'\n// import { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport BigCalendar from 'react-big-calendar-like-google';\nimport 'react-big-calendar-like-google/lib/css/react-big-calendar.css'\nimport { connect } from 'react-redux'\nimport { NavLink, withRouter } from 'react-router-dom'\nimport moment from \"moment\";\n// import \"react-big-calendar/lib/css/react-big-calendar.css\";\n// @import 'react-big-calendar/lib/sass/styles';\n\nimport { getFollowedEvents, fetchAllUsers, newEvent, editProfile } from '../redux/actions'\nimport { Icon, Item, Label, Image, Button } from 'semantic-ui-react'\nimport { AlphaPicker, CompactPicker, HuePicker, SketchPicker } from 'react-color'\n\nmoment.locale(\"en-US\");\nBigCalendar.momentLocalizer(moment)\n\n\nclass HomeCalendar extends React.Component {\n\n    state = {\n        eventIds: [],\n        first_color: \"pink\",\n        second_color: \"purple\"\n    }\n\n    componentDidMount() {\n        const { currentUser, fetchEvents, fetchAllUsers } = this.props\n        if (currentUser.id) {\n            fetchEvents(currentUser.id)\n            fetchAllUsers()\n        }\n    }\n\n    allEvents = () => {\n        return this.props.followedEvents.map(event => {\n            return {\n                title: event.title,\n                start: moment(event.date),\n                end: moment(event.date),\n                allDay: true,\n                resourceId: 10,\n                tooltip: event.title,\n            }\n        })\n    }\n\n    defaultEvent = () => {\n        return ([{\n            title: \"No Events!\",\n            start: new Date(),\n            end: new Date(),\n            allDay: true,\n            resourceId: 1\n        }])\n    }\n\n    onClick = (e) => {\n        const { eventIds } = this.state\n        if (eventIds.includes(parseInt(e.target.id))) {\n            console.log(\"already on list\")\n            let updatedList = [...eventIds]\n            let indexOfDeleted = updatedList.findIndex(eventId => eventId === parseInt(e.target.id))\n            updatedList.splice(indexOfDeleted, 1)\n            this.setState({eventIds: updatedList})\n        } else {\n            this.setState({eventIds: [...eventIds, parseInt(e.target.id)]})\n        }\n        \n    }\n\n    makeAvatars = () => {\n        const { currentUser, followedUsers, allUsers } = this.props\n        const { eventIds } = this.state\n        let avatarArray = followedUsers.map(user => user.id)\n        avatarArray.push(currentUser.id)\n        if (allUsers.length > 0) {\n            let followedUserAvatars = allUsers.filter(user => avatarArray.includes(user.id))\n        return followedUserAvatars.map(user => {\n            return (\n                (<Item >\n                        <Item.Content style={{marginRight: \"15%\"}} onClick={this.onClick}>\n                            {user.profile_picture ?\n                            <Image \n                                disabled={eventIds.includes(user.id) ? true : false}\n                                src={user.profile_picture.url} \n                                circular \n                                size=\"tiny\" \n                                link={true} \n                                id={user.id}/> \n                            :\n                            <Icon \n                                disabled={eventIds.includes(user.id) ? true : false} \n                                circular \n                                size=\"big\" \n                                color='blue' \n                                name='user' \n                                link={true} \n                                id={user.id} /> \n                            }\n                        </Item.Content>\n                    </Item>)\n            )\n        })\n        }\n    }\n\n    onSelectEvent = (e) => {\n        this.props.history.push(`/users/${e.resourceId}`)\n    }\n\n    selectAll = () => {\n        this.setState({eventIds: []})\n    }\n\n    handleChangeCompleteOne = (color) => {\n        let userId = this.props.currentUser.id\n        this.setState({\n            first_color: color.hex\n        }, () => this.props.editProfile(userId, {first_color: color.hex}))\n    }\n\n    handleChangeCompleteTwo = (color) => {\n        let userId = this.props.currentUser.id\n        this.setState({\n            second_color: color.hex\n        }, () => this.props.editProfile(userId, {second_color: color.hex}))\n    }\n\n    render() {\n        const { currentUser, followedEvents, allEvents } = this.props\n        const { eventIds } = this.state\n        console.log(followedEvents)\n        let usersEvents = allEvents.filter(event => event.user_id === currentUser.id)\n        let allCalEvents = followedEvents.concat(usersEvents)\n        let filteredEvents = allCalEvents.filter(event => !eventIds.includes(event.user_id))\n        let filteredEventsForCal = filteredEvents.map(event => {\n            return {\n                title: `${event.initials} - ${event.title}`,\n                bgColor: event.user_id === currentUser.id \n                    ? \n                        currentUser.first_color ? currentUser.first_color : \"pink\"\n                    : \n                        currentUser.second_color ? currentUser.second_color : \"purple\",\n                start: moment(event.date),\n                end: moment(event.date),\n                allDay: true,\n                resourceId: event.user_id,\n                tooltipAccessor: event.title,\n            }})\n\n\n        return (\n            <>\n            <div style={{height: \"100%\", marginTop: \"7%\", textAlign: \"center\"}}>\n                <div>\n                    {followedEvents.length > 0 && eventIds.length > 0 \n                        ? \n                        <Label  onClick={this.selectAll} style={{height: \"fit-content\"}}>\n                            <Icon name=\"checkmark\" link={true} />Select All\n                        </Label> \n                        : \n                        <Label style={{height: \"fit-content\"}}>click icons to toggle events off calendar</Label> \n                    }\n                </div>\n                <div style={{display: \"flex\", justifyContent: \"center\", paddingLeft: \"18%\", paddingBottom: \"0%\"}}>\n                \n                    {this.makeAvatars()}\n                    \n                    <Item as={NavLink} to={`/events/new`} style={{paddingBottom: \"2%\", paddingTop: \"2%\"}}>\n                        <Item.Content style={{marginRight: \"5%\", paddingLeft: \"200px\"}}>\n                        <Icon size=\"big\" color='pink' name='calendar plus outline' link={true} /> \n                    </Item.Content>\n                    </Item>\n                </div>\n        <div style={{display: \"flex\", justifyContent: \"space-around\"}}>\n            <div style={{margin: \"0% 0% 5% 5%\"}}>  \n                <BigCalendar\n                    // selectable\n                    // localizer={localizer}\n\n                    events={followedEvents.length > 0 || currentUser.own_events.length > 0?  \n                        filteredEventsForCal\n                        : this.defaultEvent()}\n                    \n                    defaultView=\"month\"\n                    views={[\"month\", \"week\"]}\n                    // min={new Date(2020, 0, 1, 8, 0)} // 8.00 AM\n                    // max={new Date(2020, 0, 1, 17, 0)} // Max will be 6.00 PM!\n                    defaultDate={new Date()}\n                    popup={true}\n                    // popupOffset={{x: 30, y: 20}}\n                    startAccessor=\"start\"\n                    endAccessor=\"end\"\n                    drilldownView=\"week\"\n                    onSelectEvent={this.onSelectEvent}\n                    style={{height: 525, width: 1100, paddingTop: \"0\", paddingBottom: \"5%\"}}\n                />\n                </div>  \n                <div style={{textAlign: \"center\"}}>\n                    <h4>Your Color</h4>\n                    <CompactPicker\n                        id=\"1\"\n                        color={this.state.first_color}\n                        onChangeComplete={this.handleChangeCompleteOne}\n                    />\n                    <h4>Everyone Else's Color</h4>\n                    <CompactPicker\n                        id=\"2\"\n                        color={this.state.second_color}\n                        onChangeComplete={this.handleChangeCompleteTwo}\n                    />\n                </div>\n            </div>\n        </div>\n            </>\n        )\n    }\n}\n\nconst msp = (state) => {\n    return {\n        followedEvents: state.followedEvents,\n        currentUser: state.currentUser,\n        followedUsers: state.followedUsers,\n        allUsers: state.allUsers, \n        allEvents: state.allEvents\n    }\n}\n\nconst mdp = (dispatch) => {\n    return {\n        fetchEvents: (userId) => dispatch(getFollowedEvents(userId)),\n        fetchAllUsers: () => dispatch(fetchAllUsers()),\n        newEvent: (eventObj) => dispatch(newEvent(eventObj)),\n        editProfile: (userId, userObj) => dispatch(editProfile(userId, userObj))\n    }\n}\n\nexport default connect(msp, mdp)(withRouter(HomeCalendar))","/Users/juliazolotarev/Documents/Flatiron/assignments/Mod-5/goodfriend/goodfriend-frontend/src/components/UserProfile.js",[],"/Users/juliazolotarev/Documents/Flatiron/assignments/Mod-5/goodfriend/goodfriend-frontend/src/redux/reducer.js",[],"/Users/juliazolotarev/Documents/Flatiron/assignments/Mod-5/goodfriend/goodfriend-frontend/src/redux/actionTypes.js",[],{"ruleId":"31","severity":1,"message":"32","line":12,"column":36,"nodeType":"33","messageId":"34","endLine":12,"endColumn":42},{"ruleId":"31","severity":1,"message":"35","line":13,"column":10,"nodeType":"33","messageId":"34","endLine":13,"endColumn":21},{"ruleId":"31","severity":1,"message":"36","line":13,"column":38,"nodeType":"33","messageId":"34","endLine":13,"endColumn":47},{"ruleId":"31","severity":1,"message":"37","line":13,"column":49,"nodeType":"33","messageId":"34","endLine":13,"endColumn":61},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'AlphaPicker' is defined but never used.","'HuePicker' is defined but never used.","'SketchPicker' is defined but never used."]